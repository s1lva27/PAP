<?php
// Verificar se o utilizador está autenticado
if (!isset($_SESSION['id'])) {
    return;
}

$currentUserId = $_SESSION['id'];

// Query inteligente para sugestões baseada em:
// 1. Utilizadores que os meus seguidos seguem (mas eu não sigo)
// 2. Utilizadores com atividade recente
// 3. Utilizadores populares (com mais seguidores)
// 4. Excluir utilizadores que já sigo
$sqlSuggestions = "
    SELECT DISTINCT u.id, u.nome_completo, u.nick, p.foto_perfil, p.ocupacao,
           COUNT(DISTINCT s2.id_seguidor) as total_seguidores,
           COUNT(DISTINCT pub.id_publicacao) as total_publicacoes,
           MAX(pub.data_criacao) as ultima_publicacao,
           CASE 
               WHEN EXISTS (
                   SELECT 1 FROM seguidores s3 
                   WHERE s3.id_seguidor IN (
                       SELECT id_seguido FROM seguidores WHERE id_seguidor = ?
                   ) AND s3.id_seguido = u.id
               ) THEN 1 ELSE 0 
           END as seguido_por_amigos
    FROM utilizadores u
    LEFT JOIN perfis p ON u.id = p.id_utilizador
    LEFT JOIN seguidores s2 ON u.id = s2.id_seguido
    LEFT JOIN publicacoes pub ON u.id = pub.id_utilizador AND pub.deletado_em = '0000-00-00 00:00:00'
    WHERE u.id != ?
    AND u.id NOT IN (
        SELECT id_seguido FROM seguidores WHERE id_seguidor = ?
    )
    GROUP BY u.id, u.nome_completo, u.nick, p.foto_perfil, p.ocupacao
    ORDER BY 
        seguido_por_amigos DESC,
        total_seguidores DESC,
        ultima_publicacao DESC,
        total_publicacoes DESC
    LIMIT 5
";

$stmt = $con->prepare($sqlSuggestions);
$stmt->bind_param("iii", $currentUserId, $currentUserId, $currentUserId);
$stmt->execute();
$suggestions = $stmt->get_result();
?>

<aside class="suggestions-sidebar">
    <div class="suggestions-container">
        <div class="suggestions-header">
            <h3><i class="fas fa-user-plus"></i> Sugestões para si</h3>
        </div>
        
        <div class="suggestions-list" id="suggestionsList">
            <?php if ($suggestions->num_rows > 0): ?>
                <?php while ($user = $suggestions->fetch_assoc()): ?>
                    <div class="suggestion-item" data-user-id="<?php echo $user['id']; ?>">
                        <div class="suggestion-avatar">
                            <img src="images/perfil/<?php echo $user['foto_perfil'] ?: 'default-profile.jpg'; ?>" 
                                 alt="<?php echo htmlspecialchars($user['nome_completo']); ?>">
                        </div>
                        <div class="suggestion-info">
                            <h4><?php echo htmlspecialchars($user['nome_completo']); ?></h4>
                            <p class="suggestion-username">@<?php echo htmlspecialchars($user['nick']); ?></p>
                            <?php if (!empty($user['ocupacao'])): ?>
                                <p class="suggestion-occupation"><?php echo htmlspecialchars($user['ocupacao']); ?></p>
                            <?php endif; ?>
                            <div class="suggestion-stats">
                                <span><?php echo $user['total_seguidores']; ?> seguidores</span>
                                <?php if ($user['total_publicacoes'] > 0): ?>
                                    <span>•</span>
                                    <span><?php echo $user['total_publicacoes']; ?> posts</span>
                                <?php endif; ?>
                            </div>
                        </div>
                        <div class="suggestion-actions">
                            <button class="follow-suggestion-btn" onclick="followUser(<?php echo $user['id']; ?>, this)">
                                <i class="fas fa-user-plus"></i>
                                Seguir
                            </button>
                            <button class="dismiss-suggestion-btn" onclick="dismissSuggestion(<?php echo $user['id']; ?>, this)" title="Dispensar sugestão">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                <?php endwhile; ?>
            <?php else: ?>
                <div class="no-suggestions">
                    <i class="fas fa-users"></i>
                    <p>Sem sugestões no momento</p>
                    <small>Volte mais tarde para ver novas sugestões</small>
                </div>
            <?php endif; ?>
        </div>
        
        <div class="suggestions-footer">
            <button class="refresh-suggestions-btn" onclick="refreshSuggestions()">
                <i class="fas fa-sync-alt"></i>
                Atualizar sugestões
            </button>
        </div>
    </div>
</aside>

<style>
.suggestions-sidebar {
    width: 300px;
    position: sticky;
    top: calc(var(--header-height) + var(--space-lg));
    height: fit-content;
    max-height: calc(100vh - var(--header-height) - var(--space-xl));
    overflow-y: auto;
    flex-shrink: 0;
}

.suggestions-container {
    background: var(--bg-card);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-light);
    overflow: hidden;
}

.suggestions-header {
    padding: var(--space-lg);
    border-bottom: 1px solid var(--border-light);
    background: var(--bg-input);
}

.suggestions-header h3 {
    margin: 0;
    color: var(--text-light);
    font-size: 1.1rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: var(--space-sm);
}

.suggestions-header i {
    color: var(--color-primary);
}

.suggestions-list {
    max-height: 400px;
    overflow-y: auto;
}

.suggestion-item {
    display: flex;
    align-items: flex-start;
    gap: var(--space-md);
    padding: var(--space-lg);
    border-bottom: 1px solid var(--border-light);
    transition: background var(--transition-normal);
}

.suggestion-item:last-child {
    border-bottom: none;
}

.suggestion-item:hover {
    background: var(--bg-hover);
}

.suggestion-avatar {
    flex-shrink: 0;
}

.suggestion-avatar img {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid var(--color-primary);
}

.suggestion-info {
    flex: 1;
    min-width: 0;
}

.suggestion-info h4 {
    margin: 0 0 var(--space-xs);
    color: var(--text-light);
    font-size: 1rem;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.suggestion-username {
    margin: 0 0 var(--space-xs);
    color: var(--text-secondary);
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.suggestion-occupation {
    margin: 0 0 var(--space-xs);
    color: var(--text-muted);
    font-size: 0.8rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.suggestion-stats {
    color: var(--text-muted);
    font-size: 0.75rem;
    display: flex;
    align-items: center;
    gap: var(--space-xs);
}

.suggestion-actions {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
    flex-shrink: 0;
}

.follow-suggestion-btn {
    background: var(--color-primary);
    color: white;
    border: none;
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-md);
    font-size: 0.8rem;
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-normal);
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    white-space: nowrap;
}

.follow-suggestion-btn:hover {
    background: var(--color-primary-dark);
    transform: translateY(-1px);
}

.follow-suggestion-btn:disabled {
    background: var(--text-muted);
    cursor: not-allowed;
    transform: none;
}

.dismiss-suggestion-btn {
    background: transparent;
    color: var(--text-muted);
    border: 1px solid var(--border-light);
    padding: var(--space-xs);
    border-radius: var(--radius-md);
    font-size: 0.8rem;
    cursor: pointer;
    transition: all var(--transition-normal);
    display: flex;
    align-items: center;
    justify-content: center;
}

.dismiss-suggestion-btn:hover {
    background: var(--bg-hover);
    color: var(--text-secondary);
}

.no-suggestions {
    text-align: center;
    padding: var(--space-xl);
    color: var(--text-muted);
}

.no-suggestions i {
    font-size: 2rem;
    margin-bottom: var(--space-md);
    opacity: 0.5;
}

.no-suggestions p {
    margin: 0 0 var(--space-xs);
    color: var(--text-secondary);
    font-weight: 500;
}

.no-suggestions small {
    color: var(--text-muted);
    font-size: 0.8rem;
}

.suggestions-footer {
    padding: var(--space-md);
    border-top: 1px solid var(--border-light);
    background: var(--bg-input);
}

.refresh-suggestions-btn {
    width: 100%;
    background: transparent;
    color: var(--text-secondary);
    border: 1px solid var(--border-light);
    padding: var(--space-sm);
    border-radius: var(--radius-md);
    font-size: 0.9rem;
    cursor: pointer;
    transition: all var(--transition-normal);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
}

.refresh-suggestions-btn:hover {
    background: var(--bg-hover);
    color: var(--text-light);
}

.refresh-suggestions-btn i {
    transition: transform var(--transition-normal);
}

.refresh-suggestions-btn:hover i {
    transform: rotate(180deg);
}

/* Animações */
.suggestion-item {
    animation: slideInSuggestion 0.3s ease-out;
}

@keyframes slideInSuggestion {
    from {
        opacity: 0;
        transform: translateX(20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.suggestion-item.removing {
    animation: slideOutSuggestion 0.3s ease-in forwards;
}

@keyframes slideOutSuggestion {
    to {
        opacity: 0;
        transform: translateX(20px);
        height: 0;
        padding: 0;
        margin: 0;
    }
}

/* Responsive */
@media (max-width: 1200px) {
    .suggestions-sidebar {
        display: none;
    }
}

/* Custom scrollbar para a lista de sugestões */
.suggestions-list::-webkit-scrollbar {
    width: 4px;
}

.suggestions-list::-webkit-scrollbar-track {
    background: var(--bg-input);
}

.suggestions-list::-webkit-scrollbar-thumb {
    background: var(--border-light);
    border-radius: var(--radius-sm);
}

.suggestions-list::-webkit-scrollbar-thumb:hover {
    background: var(--text-muted);
}
</style>

<script>
// Função para seguir um utilizador
async function followUser(userId, button) {
    if (button.disabled) return;
    
    button.disabled = true;
    const originalContent = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Seguindo...';
    
    try {
        const response = await fetch('../backend/follow.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `id_seguido=${userId}`
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Remover a sugestão da lista
            const suggestionItem = button.closest('.suggestion-item');
            suggestionItem.classList.add('removing');
            
            setTimeout(() => {
                suggestionItem.remove();
                
                // Se não há mais sugestões, mostrar mensagem
                const suggestionsList = document.getElementById('suggestionsList');
                if (suggestionsList.children.length === 0) {
                    suggestionsList.innerHTML = `
                        <div class="no-suggestions">
                            <i class="fas fa-users"></i>
                            <p>Sem mais sugestões</p>
                            <small>Volte mais tarde para ver novas sugestões</small>
                        </div>
                    `;
                }
            }, 300);
            
            showToast('Agora está a seguir este utilizador!');
        } else {
            throw new Error(data.message || 'Erro ao seguir utilizador');
        }
    } catch (error) {
        console.error('Erro:', error);
        showToast('Erro ao seguir utilizador', 'error');
        button.disabled = false;
        button.innerHTML = originalContent;
    }
}

// Função para dispensar uma sugestão
function dismissSuggestion(userId, button) {
    const suggestionItem = button.closest('.suggestion-item');
    suggestionItem.classList.add('removing');
    
    setTimeout(() => {
        suggestionItem.remove();
        
        // Se não há mais sugestões, mostrar mensagem
        const suggestionsList = document.getElementById('suggestionsList');
        if (suggestionsList.children.length === 0) {
            suggestionsList.innerHTML = `
                <div class="no-suggestions">
                    <i class="fas fa-users"></i>
                    <p>Sem mais sugestões</p>
                    <small>Volte mais tarde para ver novas sugestões</small>
                </div>
            `;
        }
    }, 300);
}

// Função para atualizar sugestões
async function refreshSuggestions() {
    const refreshBtn = document.querySelector('.refresh-suggestions-btn');
    const suggestionsList = document.getElementById('suggestionsList');
    
    refreshBtn.disabled = true;
    refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
    
    try {
        const response = await fetch('../backend/get_suggestions.php');
        const data = await response.json();
        
        if (data.success) {
            if (data.suggestions.length > 0) {
                suggestionsList.innerHTML = data.suggestions.map(user => `
                    <div class="suggestion-item" data-user-id="${user.id}">
                        <div class="suggestion-avatar">
                            <img src="images/perfil/${user.foto_perfil || 'default-profile.jpg'}" 
                                 alt="${user.nome_completo}">
                        </div>
                        <div class="suggestion-info">
                            <h4>${user.nome_completo}</h4>
                            <p class="suggestion-username">@${user.nick}</p>
                            ${user.ocupacao ? `<p class="suggestion-occupation">${user.ocupacao}</p>` : ''}
                            <div class="suggestion-stats">
                                <span>${user.total_seguidores} seguidores</span>
                                ${user.total_publicacoes > 0 ? `<span>•</span><span>${user.total_publicacoes} posts</span>` : ''}
                            </div>
                        </div>
                        <div class="suggestion-actions">
                            <button class="follow-suggestion-btn" onclick="followUser(${user.id}, this)">
                                <i class="fas fa-user-plus"></i>
                                Seguir
                            </button>
                            <button class="dismiss-suggestion-btn" onclick="dismissSuggestion(${user.id}, this)" title="Dispensar sugestão">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `).join('');
            } else {
                suggestionsList.innerHTML = `
                    <div class="no-suggestions">
                        <i class="fas fa-users"></i>
                        <p>Sem sugestões no momento</p>
                        <small>Volte mais tarde para ver novas sugestões</small>
                    </div>
                `;
            }
        } else {
            throw new Error(data.message || 'Erro ao carregar sugestões');
        }
    } catch (error) {
        console.error('Erro:', error);
        showToast('Erro ao atualizar sugestões', 'error');
    } finally {
        refreshBtn.disabled = false;
        refreshBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Atualizar sugestões';
    }
}

// Função para mostrar toast (assumindo que já existe)
function showToast(message, type = 'success') {
    // Implementação do toast ou usar a existente
    console.log(`${type}: ${message}`);
}
</script>